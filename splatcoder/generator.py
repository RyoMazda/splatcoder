from abc import ABC, abstractmethod
from pathlib import Path

from termcolor import cprint

from . import config
from .scraper import Scraper


class Generator(ABC):
    def __init__(self, conf: config.Config) -> None:
        self.conf = conf
        self.scraper = Scraper(conf)

    @property
    @abstractmethod
    def _ext(self) -> str:
        """e.g. `.cpp`, `.py`"""
        ...

    @property
    @abstractmethod
    def _header(self) -> str:
        ...

    @property
    @abstractmethod
    def _footer(self) -> str:
        ...

    def start_task(self, url: str, output_dir: Path) -> None:
        output_dir = output_dir.absolute()
        print(f"start-task with {url}")
        file_name = Path(url).name + self._ext
        file_name = file_name.replace(output_dir.name, '')
        if file_name[0] == '_':
            file_name = file_name[1:]
        output_path = output_dir / file_name
        if output_path.exists():
            raise ValueError(f"You already have {output_path}")
        with open(output_path, 'w') as f:
            f.write(self._header)
            for sample_case in self.scraper.generate_sample_cases(url):
                f.write(sample_case.text)
            f.write(self._footer)
            with open(self.conf._template_path) as t:
                f.write(t.read())
        cprint(f"{output_path} was splatted!", 'green')

    def start_contest(self, url: str) -> None:
        cprint(f"Start contest with {url}", 'cyan')
        output_dir = Path('.') / Path(url).name
        output_dir.mkdir(exist_ok=True, parents=True)
        for task_url in self.scraper.get_task_urls(url):
            self.start_task(task_url, output_dir)


class PyGenerator(Generator):
    def __init__(self, conf: config.Config) -> None:
        super().__init__(conf)

    @property
    def _ext(self) -> str:
        return '.py'

    @property
    def _header(self) -> str:
        return '"""Generated by splatcoder\n'

    @property
    def _footer(self) -> str:
        return '"""\n'


class CppGenerator(Generator):
    def __init__(self, conf: config.Config) -> None:
        super().__init__(conf)

    @property
    def _ext(self) -> str:
        return '.cpp'

    @property
    def _header(self) -> str:
        return '/* Generated by splatcoder\n'

    @property
    def _footer(self) -> str:
        return '*/\n'


def load(conf: config.Config) -> Generator:
    if not conf._template_path.exists():
        raise ValueError(
            f"The specified template file {conf._template_path} does not exist."
            " Please read the document for details.")
    ext = conf._template_path.suffix
    if ext == '.py':
        return PyGenerator(conf)
    elif ext == '.cpp':
        return CppGenerator(conf)
    else:
        raise ValueError("The extention of the template file is invalid!")
